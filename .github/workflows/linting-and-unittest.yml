name: Tests

on:
  push:
    branches:
      - chore/sonarqube-tests
  pull_request:
    branches:
      - chore/sonarqube-tests

jobs:

  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files

  Test-Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: Build coverage file
        run: |
          pytest --cov-report=xml --cov-report=term-missing:skip-covered --cov=pysolotools/
      - name: Override Coverage Source Path for Sonar
        run: sed -i "s/<source>\/home\/runner\/work\/pysolotools\/pysolotools\/pysolotools<\/source>/<source>\/github\/workspace\/pysolotools<\/source>/g" /home/runner/work/pysolotools/coverage.xml
      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage-data
          path: coverage.xml
          retention-days: 2

  sonarqube:
    uses: Unity-Technologies/github-actions-workflows/.github/workflows/sonarqube.yml@main
    needs: Test-Linux
    with:
      coverage: true
      projectBaseDir: .

  Test-Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.8, 3.9 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: Run Tests
        run: |
          pytest tests/
