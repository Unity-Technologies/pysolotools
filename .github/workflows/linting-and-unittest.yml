name: Tests

on:
  push:
    branches:
      - chore/add-sonarqube
  pull_request:
    branches:
      - chore/add-sonarqube

jobs:

  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files

  sonar-scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: echo "SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-8)" >> $GITHUB_ENV
      - run: sonar-scanner
          -Dsonar.host.url=https://sonarqube.internal.unity3d.com
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}
          -Dsonar.qualitygate.wait=true
          -Dsonar.projectVersion=${{ env.SHA_SHORT }}
          -Dsonar.branch.name=${GITHUB_REF:11}

  Test-Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: Build coverage file
        run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=pysolotools/ | tee pytest-coverage.txt
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: pytest.xml
      - name: Test Failure Check
        if: ${{ steps.steps.coverageComment.outputs.failures > 0 || steps.steps.coverageComment.outputs.errors > 0 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed("Tests Failed")

  Test-Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ 3.8, 3.9 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Install dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: Run Tests
        run: |
          pytest tests/
